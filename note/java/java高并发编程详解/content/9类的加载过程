### 类的加载过程

##### 类的加载过程简介

类的加载过程一般分为三个比较大的阶段：加载阶段、连接阶段和初始化阶段

加载阶段：主要负责查找并且加载类的二进制数据文件，其实就是class文件。

连接阶段：验证确保类文件的正确性，准备为类的静态变量分配内存，并且为其初始化默认值，解析把类中的符号引用转换为直接引用。

初始阶段：为类的静态变量赋予正确的初始值。

JVM对类的初始化是一个延迟的机制，即使用的是lazy的方式，当一个类在首次使用的时候才会被初始化。

##### 类的主动使用与被动使用

主动使用包含以下6种情况：

- 通过new关键字会导致类的初始化
- 访问类的静态变量，包括读取和更新会导致类的初始化
- 访问类的静态方法，会导致类的初始化
- 对某个类进行反射操作，会导致类的初始化
- 初始化子类会导致父类的初始化
- 启动类：也就是执行main函数所在的类会导致该类的初始化

除了以上所述的6种情况，其余的都称为被动使用，不会导致类的加载和初始化。

例如：构造某个类的数组时，并不会导致该类的初始化，引用类的静态常量不会导致类的初始化。

##### 类的加载过程详解

**类的加载阶段**

类的加载就是将class文件中的二进制数据读取到内存之中，然后将该字节流所代表的静态存储结构转换为方法区中运行时的数据结构，并且在堆内在中生成一个类的Class对象，作为访问方法区数据结构的入口。

**类的连接阶段**

1. 验证：验证在连接阶段中的主要目的是确保class文件的字节流所包含的内容符合当前JVM的规范要求。
2. 准备：当一个class的字节流通过了所有的验证过程之后，就开始为该对象的类变量，也就是静态变量，分配内存并且设置初始值了。
3. 解析：所谓解析就是在常量池中寻找类、接口、字段和方法的符号引用，并且将这些符号引用替换成直接引用的过程。

**类的初始化阶段**

在初始化阶段做的最主要的一件事情就是执行<clinit>()方法的过程（class initialize 缩写）在<clinit>()方法中所有的类变量都会被赋予正确的值，也就是在程序编写的时候指定的值。

**总结**

```java
public class Singleton {
    private static Singleton instance=new Singleton();
    private static int x=0;
    private static int y;

    public Singleton(){
        x++;
        y++;
    }

    public static void main(String[] args) {
        System.out.println(instance.x); //0
        System.out.println(instance.y); //1
    }
}
```

在连接阶段，为每个变量赋予相应的初始值：

instance=null，x=0，y=0

在类的初始化阶段，需要为每一个类赋予程序编写时期所期待的正确的初始值，instance创建时，得到的值：

instalce= 对象，x=1，y=1

然后，初始化x与y，由于x显示地进行赋值，所以x=0，而y由于没有给定初始值，在构造函数中计算所得的值就是所谓的正确赋值：

instalce=对象，x=0，y=1